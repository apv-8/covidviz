{
  
    
        "post0": {
            "title": "Covid Cases & Deaths Graph for U.S",
            "content": "The graph that we will learn to make today is from the NYT article on Coronavirus in the U.S . . import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) alt.renderers.set_embed_options(actions=False) usdf[&#39;new_deaths&#39;] = usdf[&#39;deaths&#39;].diff() usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() # Bar Chart bar = alt.Chart().mark_bar(size=5,opacity=0.2,color=&#39;gray&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_deaths:Q&#39;) ) # Area Chart area = alt.Chart().mark_area(fill=&#39;gray&#39;, fillOpacity=0.15).transform_window( rolling_average=&#39;mean(new_deaths)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ) # Line Chart line = area.mark_line(**{&quot;color&quot;: &quot;black&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 3}) # Chart of deaths deaths = (bar+area+line).properties(width=800, title=&quot;Deaths&quot;) # Bar Chart bar2 = alt.Chart().mark_bar(size=5,opacity=0.2,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;) ) # Area Chart area2 = alt.Chart().mark_area(fill=&#39;red&#39;, fillOpacity=0.15).transform_window( rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ) # Line Chart line2 = area2.mark_line(**{&quot;color&quot;: &quot;red&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 3}) cases = (bar2+area2+line2).properties(width=800, title=&quot;Cases&quot;) # Vertically concatenate the charts alt.vconcat(cases, deaths, data=usdf).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ) . Possible other ways to do this - . Repeat Chart | Facet Chart https://altair-viz.github.io/user_guide/compound_charts.html | .",
            "url": "https://armsp.github.io/covidviz/2020/05/30/Covid-Cases-&-Deaths-in-US.html",
            "relUrl": "/2020/05/30/Covid-Cases-&-Deaths-in-US.html",
            "date": " • May 30, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Covid Cases Graph",
            "content": "The graph that we will learn to make today is from the NYT article on Coronavirus Tracking in US which looks as follows - . . We will take the data from NYT&#39;s GitHub repo itself. Lets jump straight into the code - . import altair as alt import pandas as pd alt.renderers.set_embed_options(actions=False) url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() # Bar Chart bar = alt.Chart(usdf).mark_bar(size=7,opacity=0.2,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;) ) # Area Chart area = alt.Chart(usdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.15).transform_window( rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ) # Line Chart line = area.mark_line(**{&quot;color&quot;: &#39;#c11111&#39;, &quot;opacity&quot;: 0.9, &quot;strokeWidth&quot;: 5}) chart = (bar+area+line).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ).properties(width=1000) chart . Now that we have replicated the chart effectively, lets filter the data so that we drop all the data before March as the chart from NYT shows - . That can be done in 2 ways : . using Pandas | using transform_filter on date | . You guessed it, we will use the latter. The code relevant to this would then be - . transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) . #collapse import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) #print(udf.columns) usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() # Bar Chart bar = alt.Chart(usdf).mark_bar(size=7,opacity=0.15,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;) ).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Area Chart area = alt.Chart(usdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.1).transform_window( #stroke=&#39;red&#39;, strokeWidth=2 rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Line Chart line = area.mark_line(**{&quot;color&quot;: &quot;#c11111&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 5}) k = (bar+area+line).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ).properties(width=700)#width=alt.Step(500) k . . Now today or maybe a couple of days ago, NYT added interactivity to their charts. Lets do that too. The main concept here is using Altair Selections. For that we will use selection_single() on date field and change the opacity of the bars. So the important code pieces are - . single_bar = alt.selection_single(fields=[&#39;date&#39;], on=&#39;mouseover&#39;, empty=&#39;none&#39;) opacity = alt.condition(single_bar, alt.value(0.5), alt.value(0.15)) . #collapse import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) #print(udf.columns) usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() single_bar = alt.selection_single(fields=[&#39;date&#39;], on=&#39;mouseover&#39;, empty=&#39;none&#39;) # Bar Chart bar = alt.Chart(usdf).mark_bar(size=7,opacity=0.15,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;), opacity= alt.condition(single_bar, alt.value(0.5), alt.value(0.15)) ).add_selection(single_bar).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Area Chart area = alt.Chart(usdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.1).transform_window( rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Line Chart line = area.mark_line(**{&quot;color&quot;: &quot;#c11111&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 5}) chart = (bar+area+line).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ).properties(width=700) chart . . Isn&#39;t that amazing . TODO . [ ] Adding tooltip/text to interactive bar chart | .",
            "url": "https://armsp.github.io/covidviz/2020/05/29/Covid-cases.html",
            "relUrl": "/2020/05/29/Covid-cases.html",
            "date": " • May 29, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "What is Altair?",
            "content": "To understand Altair we need to know what is it built on. The following hierarchy enables us to understand that - . D3 | Vega | Vega-Lite | Altair | . Lets start with Vega. . What is Vega? . Vega is a visualization grammar, a declarative language for creating, saving, and sharing interactive visualization designs. With Vega, you can describe the visual appearance and interactive behavior of a visualization in a JSON format, and generate web-based views using Canvas or SVG. . . Note: visualization grammar . Where does D3 fit in here? . To be clear, Vega is not intended as a “replacement” for D3. D3 is intentionally a lower-level library. During the early design of D3, we even referred to it as a “visualization kernel” rather than a “toolkit” or “framework”. In addition to custom design, D3 is intended as a supporting layer for higher-level visualization tools. Vega is one such tool, and Vega uses D3 heavily within its implementation. . Vega provides a higher-level visualization specification language on top of D3. By design, D3 will maintain an “expressivity advantage” and in some cases will be better suited for novel design ideas. On the other hand, we intend Vega to be convenient for a wide range of common yet customizable visualizations. . Now, that we know the top hierarchy, the rest is easy to follow - . Vega-Lite . Vega-Lite is a high-level grammar of interactive graphics. It provides a concise JSON syntax for rapidly generating visualizations to support analysis. Vega-Lite specifications can be compiled to Vega specifications. . . Note: high-level visualization grammar . Vega-Lite is used by some big players - . | | | | | | | | | | | | . Altair . In short, Altair exposes a Python API for building statistical visualizations that follows Vega-Lite syntax. . Altair is a declarative statistical visualization library for Python, based on Vega and Vega-Lite. With Altair, you can spend more time understanding your data and its meaning. . Altair’s API is simple, friendly and consistent and built on top of the powerful Vega-Lite visualization grammar. This elegant simplicity produces beautiful and effective visualizations with a minimal amount of code. . . I do not intend to teach you how to use Altair or Vega Lite. You can do that on your own using the following excellent resources - . Conference Talk by Jake VanderPlas | . Exploratory Data Visualization with Altair | UW Data Viz Curriculum | .",
            "url": "https://armsp.github.io/covidviz/2020/05/28/Altair-Intro.html",
            "relUrl": "/2020/05/28/Altair-Intro.html",
            "date": " • May 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi :wave: . My name is Shantam. This blog will contain my attempts to replicate/emulate the visualizations at large media houses, related to COVID-19 pandemic, using open source data &amp; tools. . I am a driven python developer and data scientist. I have worked with Machine Learning and Big Data too. Did I tell you I am a published poet too? . I am available for consulting, collaborations, part time or full time jobs. Let me know if you want to talk. . If you want me to try a specific visualization, do let me know by raising an issue in the GitHub Repository. . My website - www.shantamraj.com . I am working on a project that you should definitely check out - COVID-19 Stories .",
          "url": "https://armsp.github.io/covidviz/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://armsp.github.io/covidviz/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}