{
  
    
        "post0": {
            "title": "Tracking the Global Outbreak: Growth Rates",
            "content": "Today we will make the growth rate charts from the NYT article on Tracking the Global Outbreak for all the countries. . . We will use the JHU CSSE dataset since NYT does not provide itw own global countries dataset . import pandas as pd import altair as alt raw_data_url = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39; raw_df = pd.read_csv(raw_data_url) . A few important observations - . There are some countries that have data at a finer level like state/county. For those countires we will extract the extract the corresponding rows, sum them up into a single row and transpose it to convert to a dataframe. | Those exceptional countries are &#39;Australia&#39;, &#39;Canada&#39;, &#39;China&#39;, &#39;Denmark&#39;, &#39;France&#39;, &#39;Netherlands&#39;, &#39;United Kingdom&#39; | . Let&#39;s convert the data into the desired long form from the existing wide form. . # collapse long_df = pd.DataFrame() exceptional_countries = [&#39;Australia&#39;, &#39;Canada&#39;, &#39;China&#39;, &#39;Denmark&#39;, &#39;France&#39;, &#39;Netherlands&#39;, &#39;United Kingdom&#39;] country_df_list = [] def extract_country(s): if s[1].strip() not in exceptional_countries: # print(f&quot;{s[1]} - exceptional case&quot;) # else: temp_df = pd.DataFrame(s[4:]) temp_df.columns = [&#39;value&#39;] temp_df[&#39;country&#39;] = s[1] temp_df[&#39;growth&#39;] = temp_df[&#39;value&#39;].diff() temp_df[&#39;growth&#39;][0] = temp_df[&#39;value&#39;].iloc[0] temp_df[&#39;growth&#39;] = temp_df[&#39;growth&#39;].astype(int) temp_df = temp_df.rename_axis(&#39;date&#39;).reset_index() country_df_list.append(temp_df) for country in exceptional_countries: temp_df = pd.DataFrame(raw_df[raw_df[&#39;Country/Region&#39;] == country].iloc[:,4:].sum(axis=0).rename_axis(&#39;date&#39;).reset_index()) temp_df.columns = [&#39;date&#39;,&#39;value&#39;] temp_df[&#39;country&#39;] = country temp_df[&#39;growth&#39;] = temp_df[&#39;value&#39;].diff() temp_df.loc[0, &#39;growth&#39;] = temp_df[&#39;value&#39;].iloc[0] temp_df[&#39;growth&#39;] = temp_df[&#39;growth&#39;].astype(int) country_df_list.append(temp_df) raw_df.apply(extract_country, axis=1) long_df = pd.concat(country_df_list) . . Beacause this is a large dataset, Altair will - by default - refuse to display because of possible memory issues. So we will have to enable the json transformer so that the data is passed insternally as a url. We enable it using alt.data_transformers.enable(&#39;json&#39;) . # collapse alt.data_transformers.enable(&#39;json&#39;) a = alt.Chart().mark_bar(size=2, opacity=0.2, color=&#39;gray&#39;).transform_window( rolling_mean = &#39;mean(growth)&#39;, frame=[-6, 0], groupby=[&#39;place&#39;] ).encode( x=alt.X(&#39;date:T&#39;, title=None), y=alt.Y(&quot;growth:Q&quot;, title=None), ).properties(width=90, height=100) b = alt.Chart().mark_area(fill=&#39;red&#39;, fillOpacity=0.4).transform_window( rolling_mean = &#39;mean(growth)&#39;, frame=[-6, 0], groupby=[&#39;place&#39;] ).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&quot;rolling_mean:Q&quot;,title=&#39;cases&#39;) ) c = b.mark_line(**{&quot;color&quot;: &quot;red&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 2}) url = &#39;https://github.com/armsp/covidviz/blob/master/assets/2020-06-02-Data.json&#39; alt.layer(a, c, data=url).facet(alt.Column(&#39;country:N&#39;, title=None, sort=alt.EncodingSortField(&#39;value&#39;, op=&#39;max&#39;, order=&#39;descending&#39;), header=alt.Header(labelFontSize=13, labelColor=&#39;gray&#39;, labelFontWeight=&#39;bolder&#39;, labelAlign=&#39;center&#39;, labelAnchor=&#39;middle&#39;, labelOrient=&#39;top&#39;, labelPadding=-15, labelAngle=0)), spacing=alt.RowColnumber(row=70, column=5), title=&quot;Countrywise Distribution of Growth, Averaged over 7 days&quot;, columns=7, ).configure_axis( grid=False, #domainWidth=0.1 ).configure_view(strokeWidth=0).configure_title( fontSize=25, font=&#39;Courier&#39;, anchor=&#39;middle&#39;, color=&#39;gray&#39;, dy=-30 ) . . There are a few issues with the above chart - . We are seeing negative values in growth rate, How can it be negative? The lowest it can go is 0. | The graphs for countries with very few cases don&#39;t look good. | The scales of the countries vary a lot. We need to adjust the scale like NYT does, to make it readable. | . Let&#39;s improve upon the issues above with the following solutions - . NYT does not show graphs for those with fewer than 100 cases. Like NYT we have filtered countries with less than 100 cases | The growth rates will be negative if there are discrepancies in the data - when the cumulative cases drop for any reason than the previous day. You will certainly notice thos in the dataset for some of the countries. | We will filter the negative values as based on my observation that&#39;s what NYT seems to be doing | Independednt Y axis | . Few points to keep in mind - . The bar chart shows the increment in cases per day | The line chart is the 7 day average of growth in cases per day | The facet is ordered in descending order by the maximum number of cases | We will forcefully align the countries one below the other because choosing independent axes often leads to misaligned facet items | . # collapse a = alt.Chart().mark_bar(size=2, opacity=0.05, color=&#39;red&#39;).transform_filter( alt.datum.growth &gt;= 0).transform_filter(alt.datum.value &gt; 100).transform_window( rolling_mean = &#39;mean(growth)&#39;, frame=[-6, 0], groupby=[&#39;place&#39;] ).encode( x=alt.X(&#39;date:T&#39;, title=None), y=alt.Y(&quot;growth:Q&quot;, title=None), ).properties(width=90, height=100) b = alt.Chart().mark_area(fill=&#39;red&#39;, fillOpacity=0.04).transform_filter( alt.datum.growth &gt;= 0).transform_filter(alt.datum.value &gt; 100).transform_window( rolling_mean = &#39;mean(growth)&#39;, frame=[-6, 0], groupby=[&#39;place&#39;] ).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&quot;rolling_mean:Q&quot;,title=&#39;cases&#39;) ) c = b.mark_line(**{&quot;color&quot;: &quot;red&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 2}) alt.layer(a, b, c, data=url).facet(alt.Column(&#39;country:N&#39;, title=None, sort=alt.EncodingSortField(&#39;value&#39;, op=&#39;max&#39;, order=&#39;descending&#39;), header=alt.Header(labelFontSize=13, labelColor=&#39;gray&#39;, labelFontWeight=&#39;bolder&#39;, labelAlign=&#39;center&#39;, labelAnchor=&#39;middle&#39;, labelOrient=&#39;top&#39;, labelPadding=-15, labelAngle=0)), spacing=alt.RowColnumber(row=70, column=5), title=&quot;Countrywise Distribution of Growth, Averaged over 7 days&quot;, columns=7, align=&#39;each&#39;, ).resolve_scale(y=&#39;independent&#39;, x=&#39;independent&#39;,).configure_axis( grid=False, #domainWidth=0.1 ).configure_view(strokeWidth=0).configure_title( fontSize=25, font=&#39;Courier&#39;, anchor=&#39;middle&#39;, color=&#39;gray&#39;, dy=-30 ) . . Feel free to comment below if you didn&#39;t understand anything and I will try my best to answer .",
            "url": "https://armsp.github.io/covidviz/2020/06/02/World-Map-growth.html",
            "relUrl": "/2020/06/02/World-Map-growth.html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Missing Deaths",
            "content": "Today we will make the following graph that shows the excess deaths as appeared in the article 87,000 Missing Deaths: Tracking the True Toll of the Coronavirus Outbreak . . Fortunately the NYT provides the dataset for this in their repository. . What does Excess Death mean and how do we calculate it? . Excess deaths are estimates that include deaths from Covid-19 and other causes. Reported Covid-19 deaths reflect official coronavirus deaths during the period when all-cause mortality data is available, including figures that were later revised. . According to the github repository - . Official Covid-19 death tolls offer a limited view of the impact of the outbreak because they often exclude people who have not been tested and those who died at home. All-cause mortality is widely used by demographers and other researchers to understand the full impact of deadly events, including epidemics, wars and natural disasters. The totals in this data include deaths from Covid-19 as well as those from other causes, likely including people who could not be treated or did not seek treatment for other conditions. . . Expected Deaths . We have calculated an average number of expected deaths for each area based on historical data for the same time of year. These expected deaths are the basis for our excess death calculations, which estimate how many more people have died this year than in an average year. . The number of years used in the historical averages changes depending on what data is available, whether it is reliable and underlying demographic changes. The baselines do not adjust for changes in age or other demographics, and they do not account for changes in total population. . The number of expected deaths are not adjusted for how non-Covid-19 deaths may change during the outbreak, which will take some time to figure out. As countries impose control measures, deaths from causes like road accidents and homicides may decline. And people who die from Covid-19 cannot die later from other causes, which may reduce other causes of death. Both of these factors, if they play a role, would lead these baselines to understate, rather than overstate, the number of excess deaths. . That is what we are going to do, average the results based on the baseline field to show the blue line for expected deaths. However it also looks like they are using some sort of linear model and smoothing as mentioned in the accompanying news article - . To estimate expected deaths, we fit a linear model to reported deaths in each country from 2015 to January 2020. The model has two components — a linear time trend to account for demographic changes and a smoothing spline to account for seasonal variation. For countries limited to monthly data, the model includes month as a fixed effect rather than using a smoothing spline. . Since there isn&#39;t much information on that we will ignore it for the time being. . What&#39;s the insight that this data gives? . These numbers undermine the notion that many people who have died from the virus may soon have died anyway. In Britain, which has recorded more Covid-19 deaths than any country except the United States, 59,000 more people than usual have died since mid-March — and about 14,000 more than have been captured by official death statistics. . import pandas as pd import altair as alt url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/excess-deaths/deaths.csv&quot; raw = pd.read_csv(url) . Lets study Sweden, Switzerland, UK and France for our charts . sweden = raw[raw[&#39;country&#39;] == &quot;Sweden&quot;] switzerland = raw[raw[&#39;country&#39;] == &quot;Switzerland&quot;] uk = raw[raw[&#39;country&#39;] == &quot;United Kingdom&quot;] france = raw[raw[&#39;country&#39;] == &quot;France&quot;] . Let&#39;s start with a simple layered chart - area for year 2019 and line for 2020. We will not average anything right now nor will we use all the fields in our dataset. . base = alt.Chart(sweden).encode( x=alt.X(&#39;week&#39;) ) alt.layer( base.mark_area(fill=&#39;lightblue&#39;, line=True, fillOpacity=0.3).transform_filter(&quot;datum.year == 2019&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&#39;maroon&#39;).transform_filter(&quot;datum.year == 2020&quot;).encode(y=&#39;deaths&#39;), ).properties(width=500) . For Sweden they plot the gray lines for years 2015 to 2019. The blue line is the weekly average per year and the maroon line is the deaths in 2020. . # collapse base = alt.Chart(sweden).encode( x=&#39;week&#39;, ).properties(height=200) lines = alt.layer( base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2015&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2016&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2017&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2018&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2019&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&#39;maroon&#39;).transform_filter(&quot;datum.year == 2020&quot;).encode(y=&#39;deaths&#39;), ).properties(width=400) avg = base.mark_area(fill=&#39;lightblue&#39;, line=True, fillOpacity=0.3).transform_filter(&quot;datum.year &lt; 2020&quot;).encode( y=&#39;average(deaths)&#39;, ).properties(width=500) avg + lines . . Looks like we capture the trend pretty well . Similarly for Switzerland, we will also turn off the grid and the view box - . # collapse base = alt.Chart(switzerland).encode( x=&#39;week&#39;, ).properties(height=300, width=500) lines = alt.layer( base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2015&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2016&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2017&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2018&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2019&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&#39;maroon&#39;).transform_filter(&quot;datum.year == 2020&quot;).encode(y=&#39;deaths&#39;), ).properties(width=400) avg = base.mark_area(fill=&#39;lightblue&#39;, line=True, fillOpacity=0.3).transform_filter(&quot;datum.year &lt; 2020&quot;).encode( y=&#39;average(deaths)&#39;, ) (avg+lines).configure_view(strokeWidth=0).configure_axis(grid=False) . . Trying the same for U.K - . # collapse base = alt.Chart(uk).encode( x=&#39;week&#39;, ).properties(height=300, width=550) l = alt.layer( base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2015&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2016&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2017&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2018&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(&quot;datum.year == 2019&quot;).encode(y=&#39;deaths&#39;), base.mark_line(color=&#39;maroon&#39;).transform_filter(&quot;datum.year == 2020&quot;).encode(y=&#39;deaths&#39;), ).properties(width=400) rule = base.mark_area(fill=&#39;lightblue&#39;, line=True, fillOpacity=0.3).transform_filter(&quot;datum.year &lt; 2020&quot;).encode( y=&#39;average(deaths)&#39;, ) (rule+l).configure_view(strokeWidth=0).configure_axis(grid=False) . . Let&#39;s make use of loops to do the same but for France (based on observation it looks like the gray lines are from 2015 to 2019) - . # collapse base = alt.Chart(france).encode( x=&#39;week&#39;, ).properties(height=300, width=550) avg = base.mark_area(fill=&#39;lightblue&#39;, line=True, fillOpacity=0.3).transform_filter(&quot;datum.year &lt; 2020&quot;).encode( y=&#39;average(deaths)&#39;, ) layer = [] for year in range(2015, 2021): l = base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(f&quot;datum.year == {year}&quot;).encode(y=&#39;deaths&#39;) if year == 2020: l = base.mark_line(color=&#39;maroon&#39;).transform_filter(f&quot;datum.year == {year}&quot;).encode(y=&#39;deaths&#39;) layer.append(l) alt.layer(avg,*layer).configure_view(strokeWidth=0).configure_axis(grid=False) . . The excess deaths articles and graphs update frequently and the graphics also changes quite a bit - . . In the latest versions of the charts they started using dashed lines, for that we will use strokeDash = alt.value([3,3]) . # collapse base = alt.Chart(france).encode( x=&#39;week&#39;, ).properties(height=300, width=550) avg = base.mark_area(fill=&#39;lightblue&#39;, line=True, strokeDash=[1,2], fillOpacity=0.3).transform_filter(&quot;datum.year &lt; 2020&quot;).encode( y=&#39;average(deaths)&#39;, strokeDash = alt.value([3,3]) ) layer = [] for year in range(2015, 2021): l = base.mark_line(color=&quot;gray&quot;, strokeWidth=0.5).transform_filter(f&quot;datum.year == {year}&quot;).encode(y=&#39;deaths&#39;) if year == 2020: l = base.mark_line(color=&#39;maroon&#39;).transform_filter(f&quot;datum.year == {year}&quot;).encode(y=&#39;deaths&#39;) layer.append(l) alt.layer(avg,*layer).configure_view(strokeWidth=0).configure_axis(grid=False) . .",
            "url": "https://armsp.github.io/covidviz/2020/06/01/Excess-Deaths.html",
            "relUrl": "/2020/06/01/Excess-Deaths.html",
            "date": " • Jun 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Covid Death Rates Graph",
            "content": "The graph that we will learn to make today is from the NYT article on Comparing Coronavirus Death Rates Across the U.S . . import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv&quot; usdf = pd.read_csv(url) nydf = usdf[(usdf[&#39;state&#39;] == &quot;New York&quot;) &amp; (usdf[&#39;date&#39;] &lt; &#39;2020-04-23&#39;)] nydf[&#39;deaths_perday&#39;] = nydf[&#39;deaths&#39;].diff() chart = alt.Chart(nydf).mark_area(fill=&#39;red&#39;, fillOpacity=0.5, line=True, interpolate=&#39;step-after&#39;,).encode( x=&#39;date:T&#39;, y=&#39;deaths_perday:Q&#39;, color=alt.value(&#39;red&#39;) # Exceptional Case, bug in Vega or Vega Lite - https://stackoverflow.com/questions/62005052/how-do-i-change-the-line-color-in-altairs-filled-step-chart ).properties(height=250, width=700).configure_view( strokeWidth=0 ).configure_axis( grid=False, title=None ) chart . To highlight the region after the Stay at Home order date, we will use a Rectangle Chart - mark_react() We will also make a new source data that contains the starting date of the stay at home order and the perhaps the end date of stay at home or just the latest data in the dataset. NYT has not updated this graph and has data only till 21st or 22nd April. . # collapse chart = alt.Chart(nydf).mark_area(fill=&#39;red&#39;, fillOpacity=0.5, line=True, interpolate=&#39;step-after&#39;,).encode( x=&#39;date:T&#39;, y=&#39;deaths_perday:Q&#39;, color=alt.value(&#39;red&#39;) # Exceptional Case, bug in Vega or Vega Lite - https://stackoverflow.com/questions/62005052/how-do-i-change-the-line-color-in-altairs-filled-step-chart ).properties(height=250, width=700) . . This is the important piece of code on how to set up the Rectangle chart . source2 = [{ &quot;start&quot;: &quot;2020-03-23&quot;, &quot;end&quot;: nydf[&#39;date&#39;].max(), &quot;event&quot;: &quot;Stay at Home&quot; }] source2 = alt.pd.DataFrame(source2) rect = alt.Chart(source2).mark_rect().encode( x = &#39;start:T&#39;, x2 = &#39;end:T&#39;, color=alt.value(&#39;lightgray&#39;) ) (rect+chart).configure_view( strokeWidth=0 ).configure_axis( grid=False, title=None ) . Similarly you can do the same for any other state. Lets try Michigan for a change - . michdf = usdf[(usdf[&#39;state&#39;] == &quot;Michigan&quot;) &amp; (usdf[&#39;date&#39;] &lt; &#39;2020-04-23&#39;)] michdf[&#39;deaths_perday&#39;] = michdf[&#39;deaths&#39;].diff() . # collapse chart = alt.Chart(michdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.5, line=True, interpolate=&#39;step-after&#39;,).encode( x=&#39;date:T&#39;, y=&#39;deaths_perday:Q&#39;, color=alt.value(&#39;red&#39;) # Exceptional Case, bug in Vega or Vega Lite - https://stackoverflow.com/questions/62005052/how-do-i-change-the-line-color-in-altairs-filled-step-chart ).properties(height=150, width=700) source2 = [{ &quot;start&quot;: &quot;2020-03-25&quot;, &quot;end&quot;: michdf[&#39;date&#39;].max(), &quot;event&quot;: &quot;Stay at Home&quot; }] source2 = alt.pd.DataFrame(source2) rect = alt.Chart(source2).mark_rect().encode( x = &#39;start:T&#39;, x2 = &#39;end:T&#39;, color=alt.value(&#39;lightgray&#39;) ) (rect+chart).configure_view( strokeWidth=0 ).configure_axis( grid=False, title=None ) . . The visualization till the latest date for NY would look like the following - . # collapse nydf = usdf[(usdf[&#39;state&#39;] == &quot;New York&quot;)] nydf[&#39;deaths_perday&#39;] = nydf[&#39;deaths&#39;].diff() chart = alt.Chart(nydf).mark_area(fill=&#39;red&#39;, fillOpacity=0.5, line=True, interpolate=&#39;step-after&#39;,).encode( x=&#39;date:T&#39;, y=&#39;deaths_perday:Q&#39;, color=alt.value(&#39;red&#39;) # Exceptional Case, bug in Vega or Vega Lite - https://stackoverflow.com/questions/62005052/how-do-i-change-the-line-color-in-altairs-filled-step-chart ).properties(height=250, width=700) source2 = [{ &quot;start&quot;: &quot;2020-03-23&quot;, &quot;end&quot;: nydf[&#39;date&#39;].max(), &quot;event&quot;: &quot;Stay at Home&quot; }] source2 = alt.pd.DataFrame(source2) rect = alt.Chart(source2).mark_rect().encode( x = &#39;start:T&#39;, x2 = &#39;end:T&#39;, color=alt.value(&#39;lightgray&#39;) ) (rect+chart).configure_view( strokeWidth=0 ).configure_axis( grid=False, title=None ) . . TODO . Facet for all the states .",
            "url": "https://armsp.github.io/covidviz/2020/05/31/Covid-Death-Rates.html",
            "relUrl": "/2020/05/31/Covid-Death-Rates.html",
            "date": " • May 31, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Covid Cases & Deaths Graph for U.S",
            "content": "The graph that we will learn to make today is from the NYT article on Coronavirus in the U.S . . import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) alt.renderers.set_embed_options(actions=False) usdf[&#39;new_deaths&#39;] = usdf[&#39;deaths&#39;].diff() usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() # Bar Chart bar = alt.Chart().mark_bar(size=5,opacity=0.2,color=&#39;gray&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_deaths:Q&#39;) ) # Area Chart area = alt.Chart().mark_area(fill=&#39;gray&#39;, fillOpacity=0.15).transform_window( rolling_average=&#39;mean(new_deaths)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ) # Line Chart line = area.mark_line(**{&quot;color&quot;: &quot;black&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 3}) # Chart of deaths deaths = (bar+area+line).properties(width=800, title=&quot;Deaths&quot;) # Bar Chart bar2 = alt.Chart().mark_bar(size=5,opacity=0.2,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;) ) # Area Chart area2 = alt.Chart().mark_area(fill=&#39;red&#39;, fillOpacity=0.15).transform_window( rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ) # Line Chart line2 = area2.mark_line(**{&quot;color&quot;: &quot;red&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 3}) cases = (bar2+area2+line2).properties(width=800, title=&quot;Cases&quot;) # Vertically concatenate the charts alt.vconcat(cases, deaths, data=usdf).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ) . Possible other ways to do this - . Repeat Chart | Facet Chart https://altair-viz.github.io/user_guide/compound_charts.html | .",
            "url": "https://armsp.github.io/covidviz/2020/05/30/Covid-Cases-&-Deaths-in-US.html",
            "relUrl": "/2020/05/30/Covid-Cases-&-Deaths-in-US.html",
            "date": " • May 30, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Covid Cases Graph",
            "content": "The graph that we will learn to make today is from the NYT article on Coronavirus Tracking in US which looks as follows - . . We will take the data from NYT&#39;s GitHub repo itself. Lets jump straight into the code - . import altair as alt import pandas as pd alt.renderers.set_embed_options(actions=False) url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() # Bar Chart bar = alt.Chart(usdf).mark_bar(size=7,opacity=0.2,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;) ) # Area Chart area = alt.Chart(usdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.15).transform_window( rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ) # Line Chart line = area.mark_line(**{&quot;color&quot;: &#39;#c11111&#39;, &quot;opacity&quot;: 0.9, &quot;strokeWidth&quot;: 5}) chart = (bar+area+line).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ).properties(width=1000) chart . Now that we have replicated the chart effectively, lets filter the data so that we drop all the data before March as the chart from NYT shows - . That can be done in 2 ways : . using Pandas | using transform_filter on date | . You guessed it, we will use the latter. The code relevant to this would then be - . transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) . #collapse import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) #print(udf.columns) usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() # Bar Chart bar = alt.Chart(usdf).mark_bar(size=7,opacity=0.15,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;) ).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Area Chart area = alt.Chart(usdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.1).transform_window( #stroke=&#39;red&#39;, strokeWidth=2 rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Line Chart line = area.mark_line(**{&quot;color&quot;: &quot;#c11111&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 5}) k = (bar+area+line).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ).properties(width=700)#width=alt.Step(500) k . . Now today or maybe a couple of days ago, NYT added interactivity to their charts. Lets do that too. The main concept here is using Altair Selections. For that we will use selection_single() on date field and change the opacity of the bars. So the important code pieces are - . single_bar = alt.selection_single(fields=[&#39;date&#39;], on=&#39;mouseover&#39;, empty=&#39;none&#39;) opacity = alt.condition(single_bar, alt.value(0.5), alt.value(0.15)) . #collapse import altair as alt import pandas as pd url = &quot;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv&quot; usdf = pd.read_csv(url) #print(udf.columns) usdf[&#39;new_cases&#39;] = usdf[&#39;cases&#39;].diff() single_bar = alt.selection_single(fields=[&#39;date&#39;], on=&#39;mouseover&#39;, empty=&#39;none&#39;) # Bar Chart bar = alt.Chart(usdf).mark_bar(size=7,opacity=0.15,color=&#39;red&#39;).encode( x=alt.X(&#39;date:T&#39;), y=alt.Y(&#39;new_cases:Q&#39;), opacity= alt.condition(single_bar, alt.value(0.5), alt.value(0.15)) ).add_selection(single_bar).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Area Chart area = alt.Chart(usdf).mark_area(fill=&#39;red&#39;, fillOpacity=0.1).transform_window( rolling_average=&#39;mean(new_cases)&#39;, frame=[-6,0] # NYT uses [-6,0] for their average NOT [-7,0] ).encode( x=&#39;date:T&#39;, y=&#39;rolling_average:Q&#39; ).transform_filter(alt.datum.date &gt; alt.expr.toDate(&#39;2020-03-01&#39;)) # Line Chart line = area.mark_line(**{&quot;color&quot;: &quot;#c11111&quot;, &quot;opacity&quot;: 0.7, &quot;strokeWidth&quot;: 5}) chart = (bar+area+line).configure_axis( grid=False, title=None ).configure_view( strokeWidth=0 ).properties(width=700) chart . . Isn&#39;t that amazing . TODO . [ ] Adding tooltip/text to interactive bar chart | .",
            "url": "https://armsp.github.io/covidviz/2020/05/29/Covid-cases.html",
            "relUrl": "/2020/05/29/Covid-cases.html",
            "date": " • May 29, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "What is Altair?",
            "content": "To understand Altair we need to know what is it built on. The following hierarchy enables us to understand that - . D3 | Vega | Vega-Lite | Altair | . Lets start with Vega. . What is Vega? . Vega is a visualization grammar, a declarative language for creating, saving, and sharing interactive visualization designs. With Vega, you can describe the visual appearance and interactive behavior of a visualization in a JSON format, and generate web-based views using Canvas or SVG. . . Note: visualization grammar . Where does D3 fit in here? . To be clear, Vega is not intended as a “replacement” for D3. D3 is intentionally a lower-level library. During the early design of D3, we even referred to it as a “visualization kernel” rather than a “toolkit” or “framework”. In addition to custom design, D3 is intended as a supporting layer for higher-level visualization tools. Vega is one such tool, and Vega uses D3 heavily within its implementation. . Vega provides a higher-level visualization specification language on top of D3. By design, D3 will maintain an “expressivity advantage” and in some cases will be better suited for novel design ideas. On the other hand, we intend Vega to be convenient for a wide range of common yet customizable visualizations. . Now, that we know the top hierarchy, the rest is easy to follow - . Vega-Lite . Vega-Lite is a high-level grammar of interactive graphics. It provides a concise JSON syntax for rapidly generating visualizations to support analysis. Vega-Lite specifications can be compiled to Vega specifications. . . Note: high-level visualization grammar . Vega-Lite is used by some big players - . | | | | | | | | | | | | . Altair . In short, Altair exposes a Python API for building statistical visualizations that follows Vega-Lite syntax. . Altair is a declarative statistical visualization library for Python, based on Vega and Vega-Lite. With Altair, you can spend more time understanding your data and its meaning. . Altair’s API is simple, friendly and consistent and built on top of the powerful Vega-Lite visualization grammar. This elegant simplicity produces beautiful and effective visualizations with a minimal amount of code. . . I do not intend to teach you how to use Altair or Vega Lite. You can do that on your own using the following excellent resources - . Conference Talk by Jake VanderPlas | . Exploratory Data Visualization with Altair | UW Data Viz Curriculum | .",
            "url": "https://armsp.github.io/covidviz/2020/05/28/Altair-Intro.html",
            "relUrl": "/2020/05/28/Altair-Intro.html",
            "date": " • May 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi :wave: . My name is Shantam. This blog will contain my attempts to replicate/emulate the visualizations at large media houses, related to COVID-19 pandemic, using open source data &amp; tools. . I am a driven python developer and data scientist. I have worked with Machine Learning and Big Data too. Did I tell you I am a published poet too? . I am available for consulting, collaborations, part time or full time jobs. Let me know if you want to talk. . If you want me to try a specific visualization, do let me know by raising an issue in the GitHub Repository. . My website - www.shantamraj.com . I am working on a project that you should definitely check out - COVID-19 Stories .",
          "url": "https://armsp.github.io/covidviz/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://armsp.github.io/covidviz/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}